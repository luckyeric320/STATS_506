---
title: "HW4"
author: "Ruixuan Deng"
format:   
  html:
    code-fold: true     
    embed-resources: true
---

This is the link to [my repo](https://github.com/luckyeric320/STATS_506.git).

## Problem 1 - Tidyverse

```{r}
library(tidyverse)
library(nycflights13)
library(lubridate)
```

### a.

```{r}
head(airports)
```

```{r}
head(flights)
```

```{r}
dep_delay <- flights %>%
  group_by(dest) %>%
  filter(n()>=10) %>%
  summarise(
    mean_dep_delay = mean(dep_delay,na.rm=TRUE),
    median_dep_delay = median(dep_delay,na.rm=TRUE)
  ) %>%
  inner_join(airports, by=c("dest" = "faa")) %>%
  select(name,mean_dep_delay,median_dep_delay) %>%
  arrange(-mean_dep_delay) %>%
  print(n = Inf)
    
```

```{r}
arr_delay <- flights %>%
  group_by(dest) %>%
  filter(n()>=10) %>%
  summarise(
    mean_arr_delay = mean(arr_delay,na.rm=TRUE),
    median_arr_delay = median(arr_delay,na.rm=TRUE)
  ) %>%
  inner_join(airports, by=c("dest" = "faa")) %>%
  select(name,mean_arr_delay,median_arr_delay) %>%
  arrange(-mean_arr_delay) %>%
  print(n = Inf)
```

### b.

```{r}
fastest_plane <- flights %>%
  mutate(speed = distance / air_time * 60) %>% # Calculate MPH
  group_by(tailnum) %>%
  summarise(
    avg_speed  = mean(speed, na.rm = TRUE),
    num_flights = n()
  ) %>%
  arrange(-avg_speed) %>%
  slice(1) %>%
  left_join(planes, by='tailnum') %>%
  select(model,avg_speed,num_flights) %>%
  print(n=1)
```

There was only 1 flight.

## Problem 2 - get_temp()

```{r}
nnmaps <- read.csv("chicago-nmmaps.csv")
head(nnmaps)
```

```{r}
#' Get Average Temperature for a Specific Month and Year
#'
#' This function calculates the average temperature for a given month and year from a dataset, with options to convert to Celsius and specify a custom averaging function.
#'
#' @param month The month for which to retrieve the average temperature. Can be either a number (1-12) or a string (e.g., "Apr" or "April").
#' @param year A numeric year.
#' @param data A data frame containing the temperature data with a `temp` column (temperature in Fahrenheit) and a `date` column of class `Date`.
#' @param celsius Logical. If `TRUE`, the output is in Celsius; if `FALSE`, in Fahrenheit. Default is `FALSE`.
#' @param average_fn A function used to compute the mean. Default is `mean`. Users can supply  custom functions for different averaging methods
#' @return A numeric vector of length 1 representing the average temperature.
#' @importFrom dplyr filter pull
#' @importFrom lubridate year month
#' @examples
#' # Example usage with a data frame `nnmaps` containing date and temp columns:
#' get_temp("Apr", 1999, data = nnmaps)
#' get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)
#' get_temp(10, 1998, data = nnmaps, average_fn = median)
#' get_temp(13, 1998, data = nnmaps) # Should return an error for invalid month
#' get_temp(2, 2005, data = nnmaps)
#' get_temp("November", 1999, data = nnmaps, celsius = TRUE, 
#'          average_fn = function(x) { sort(x)[2:(length(x) - 1)] %>% mean() })
#'
#' @export
get_temp <- function(month,year,data,celsius = FALSE, average_fn = mean) {
  
  # Input Sanitation
   if (!is.numeric(year)) {
    stop("Year must be a numeric value.")
   }
  if (is.character(month)) {
    month <- match(tolower(month), tolower(month.abb)) %>% 
              coalesce(match(tolower(month), tolower(month.name)))
    if (is.na(month)) {
    stop("Invalid month name. Use names such as 'Apr' or 'April'.")
    }
  } else if (!is.numeric(month) || month < 1 || month > 12) {
    stop("Month must be a number between 1 and 12 or a valid month name.")
  }
  
   temp_data <- data %>%
    filter(year == !!year, month_numeric == !!month) %>%
    pull(temp)

   
  if (length(temp_data) == 0) {
    stop("No data available for the specified month and year.")
  }
   
  avg_temp <- average_fn(temp_data)
  
  if (celsius) {
    avg_temp <- (avg_temp - 32) * 5 / 9   # Convert to Celsius if specified
  }
  
  return(avg_temp)
}
```

```{r}
get_temp("Apr", 1999, data = nnmaps)
get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)
get_temp(10, 1998, data = nnmaps, average_fn = median)
#get_temp(13, 1998, data = nnmaps)
```

```{r}
#get_temp(2, 2005, data = nnmaps)

```

```{r}
get_temp("November", 1999, data =nnmaps, celsius = TRUE,
         average_fn = function(x) {
           x %>% sort -> x
           x[2:(length(x) - 1)] %>% mean %>% return
         })
```

## Problem 3 - Visualization

```{r}
library(ggplot2)
```

```{r}
art_sales <- read.csv("df_for_ml_improved_new_market.csv")
head(art_sales)
```

```{r}
art_sales <- art_sales %>%
  pivot_longer(cols = starts_with("Genre___"), names_to = "Genre", values_to = "Value") %>%
  filter(Value == 1) %>%
  mutate(Genre = str_replace(Genre, "Genre___", "")) %>%
  select(-Value)
```

```{r}
ggplot(art_sales, aes(x = year, y = price_usd)) +
  stat_summary(fun = median, geom = "line", color = "blue") +
  stat_summary(fun = median, geom = "point", color = "blue") +
  labs(title = "Median Sales Price in USD Over Time", x = "Year", y = "Median Price (USD)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

This plot shows the **median sales price in USD over time**. It demonstrates the price fluctrations with its peak in 2008 and falls after.

```{r}
ggplot(art_sales, aes(x = factor(year), fill = Genre)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(title = "Distribution of Genre of Sales Across Years", x = "Year", y = "Proportion of Sales") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

This stacked bar plot illustrates the **distribution of art sales by genre across years**. From this we observe the emergence of print while photography and sculpture remain the most popular genre.

```{r}
ggplot(art_sales, aes(x = year, y = price_usd, color = Genre)) +
  stat_summary(fun = median, geom = "line") +
  stat_summary(fun = median, geom = "point") +
  labs(title = "Change in Median Sales Price Over Time by Genre", x = "Year", y = "Median Price (USD)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

This line plot shows the **change in median sales price over time by genre**. Each line represents a genre, allowing us to compare how sales prices evolve for different types of artwork over the years. From this plot we can observe that most genres had lower prices after the financial crisis on 2008 but photography were getting steadily expensive.
